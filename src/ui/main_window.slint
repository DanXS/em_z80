
import { Button, ListView, HorizontalBox, ScrollView, LineEdit, ComboBox } from "std-widgets.slint";
import "../../fonts/liberation-mono/LiberationMono-Regular.ttf";
import "../../fonts/liberation-mono/LiberationMono-Bold.ttf";

component DisplayView inherits Rectangle {
    width: 62.5%;
    height: self.width * (9.0/16.0);
    background: #CCCCCC;
}

component MemoryView inherits Rectangle {
    in property <[string]> data;
    out property <string> addr_str;
    in property <int> scroll_row;
    callback scroll_to_addr(string);
    width: 62.5%;
    vertical-stretch: 1;
    background: #6666aa;
    VerticalLayout {
        padding: 2px;
        HorizontalBox {
            Text {
                color: #eeeeee;
                font-size: 11pt;
                font-weight: 700;
                text: "Memory";
            }
            LineEdit {
                width: 60px;
                placeholder-text: "HEX";
                edited(val) => {
                    root.addr_str = val;
                }
                accepted(val) => {
                    root.addr_str = val;
                    root.scroll_to_addr(root.addr_str);
                    i-memory-list.viewport-x = 0;
                    i-memory-list.viewport-y = -(root.scroll_row)*30px;
                }
            }
            Button {
                width: 60px;
                text: "Goto";
                enabled: { (root.addr_str != "") };
                clicked => {
                    root.scroll_to_addr(root.addr_str);
                    i-memory-list.viewport-x = 0;
                    i-memory-list.viewport-y = -(root.scroll_row)*30px;
                }
            }
        }
        Rectangle {
            background: #eeeeee;
            width: 100%;
            vertical-stretch: 1;
            i-memory-list := ListView {
                for txt in data
                : Rectangle {
                    height: 30px;
                    width: 630px;
                    Text {
                        x: 0;
                        text: txt;
                        color: #000000;
                        font-weight: 500;
                        font-size: 11pt;
                    }
                }
            }
        }
    }
}

component RegisterView inherits Rectangle {
    in property <[string]> data;
    callback set_register(string, string);
    out property <string> reg_str;
    out property <string> val_str;
    width: 37.5%;
    height: 50%;
    background: #6666aa;
    VerticalLayout {
        padding:2px;
        HorizontalBox {
            Text {
                color: #eeeeee;
                font-size: 11pt;
                font-weight: 700;
                text: "Registers";
            }
            ComboBox {
                width: 80px;
                model: ["", "AF", "AF'", "BC", "BC'", "DE", "DE'", "HL", "HL'", "IX", "IY", "SP", "PC", "IR", "WZ"];
                current-value: "";
                selected(reg) => {
                    root.reg_str = reg;
                }
            }
            LineEdit {
                width: 60px;
                placeholder-text: "HEX";
                enabled: {root.reg_str != ""};
                edited(val) => {
                    root.val_str = val;
                }
                accepted(val) => {
                    root.val_str = val;
                    root.set_register(root.reg_str, root.val_str);
                }
            }
            Button {
                width: 60px;
                text: "Set";
                enabled: { (root.reg_str != "") && (root.val_str != "") };
                clicked => {
                    root.set_register(root.reg_str, root.val_str);
                }
            }
        }
        Rectangle {
            background: #eeeeee;
            width: 100%;
            vertical-stretch: 1;
            ListView {
                width: 100%;       
                for txt in data
                : Rectangle {
                    height: 30px;
                    width: parent.width;
                    Text {
                        x: 0;
                        text: txt;
                        color: #000000;
                        font-weight: 500;
                        font-size: 11pt;
                    }
                }
            }
        }
    }
}

component DisassemblyView inherits Rectangle {
    in property <[string]> data;
    in-out property <bool> is_running;
    callback step;
    callback start_stop;
    width: 37.5%;
    background: #6666aa;
    VerticalLayout {
        padding:2px;
        HorizontalBox {
            Text {
                color: #eeeeee;
                font-size: 11pt;
                font-weight: 700;
                text: "Disassembly";
            }
            Button {
                width: 60px;
                text : "Step";
                enabled: !is_running; 
                clicked => {
                    root.step();
                }
            }
            Button {
                width: 60px;
                text: is_running ? "Stop" : "Run";
                clicked => {
                    root.start_stop();
                }
            }
        }
        Rectangle {
            background: #eeeeee;
            width: 100%;
            vertical-stretch: 1;
            ListView {
                width: 100%;       
                for txt in data
                : Rectangle {
                    height: 30px;
                    background: {(txt == data[0]) ? #ffAA88 : #eeeeee};
                    width: parent.width;
                    Text {
                        x: 0;
                        text: txt;
                        color: #000000;
                        font-weight: 500;
                        font-size: 11pt;
                    }
                }
            }
        }
    }
}

export component MainWindow inherits Window {
    in property <[string]> memory_view_data;
    in property <[string]> register_view_data;
    in property <[string]> disassembly_view_data;
    in-out property <bool> is_running;
    in property <int> memory_scroll_row;
    callback step;
    callback start_stop;
    callback set_register(string, string);
    callback memory_scroll_to_addr(string);
    default-font-family: "Liberation Mono";
    preferred-width: 1024px;
    min-width: 880px;
    preferred-height: 576px;
    min-height: 480px;
    title: "Z80 Emulator/Disassembler";
    HorizontalLayout {
        VerticalLayout {
            DisplayView {}
            MemoryView  {
                data: memory_view_data;
                scroll_row: memory_scroll_row;
                scroll_to_addr(addr) => {
                    root.memory_scroll_to_addr(addr);
                }
            }
        }
        VerticalLayout {
            RegisterView {
                data: register_view_data;
                set_register(reg, val) => {
                    root.set_register(reg, val);
                }
            }
            DisassemblyView {
                data: disassembly_view_data;
                is_running: is_running;
                step => {
                    root.step();
                }
                start_stop => {
                    root.start_stop();
                }
            }
        }
    }
}